;; -*- mode: outline; outline-regexp: " *[-\+]"; indent-tabs-mode: nil; fill-column: 120 -*-

^c^d hide subtree
^c^s show subtree

- wire

 - format - mix of length and term chars
  - faster to parse and write
  - saves some space
  - allows pre-alloc

  - start with 4 byte length
  - byte for type indicator
   - {
   - [
   - int (1,2,4,8 bytes)
   - string (1,2,4 byte length plus content)
   - double
   - number
   - true
   - false
   - null
   - uuid
   - time
   - } - close object
   - ] - close array
  
  - 0009{s3abci7}
   - {"abc":7}

 - layout
  - move code to src/ojc/ and headers to ojc/ojc.h
  - wire.[ch]
 - should function names change?
  - stream -> file
  - socket -> fd or fildes

- plan
 - precalc
 - write to buf, file, fildes
 

- make sure follow works
- allow catchup on stream parser if with callbacks
 - make error callbacks but also ojcVal callbacks, maybe the same if start is bad
 - if invalid character keep reading until the start of something
  - best effort if not sure, worse case is bogus results
  - catchup mode function
   - read until an close - white space - open is hit
    - } {    ][    }[   ] {




- reader_next_non_white(ojcErr err, Reader reader) 
 - ignore ANSI/VT100 escape sequences
  - will need to parse each code to determine length

- multiple threads
 - could have free thread to put nodes back in cache

- TBD stream write functions someday
